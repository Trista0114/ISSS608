{
  "hash": "98f501145ea9d7035a380e9f54d0c9bf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands on Exercise 05-2:Visual Correlation Analysis\"\nauthor: \"Chen.PengWei\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# 1. Learning Outcome\n\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0.\n\nThere are three broad reasons for computing a correlation matrix.\n\n-   To reveal the relationship between high-dimensional variables pair-wisely.\n-   To input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\n-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\n::: callout-note\n## Things you will learn\n\n-   3.Correlation Matrix: pairs()\n\n-   ✅4.Correlation Matrix: ggcormat()\n\n    -   patchwork to combine two\n\n-   ✅6.Correlation Matrix using corrplot Package\n\n    -   changed the default and the visualization method**\\\n        **\n\n✅ will be more often to use based on my own opinion.\n:::\n\n# 2. Getting Started\n\n::: panel-tabset\n## Installing Libraries\n\nInstall and launch **corrplot**, **ggpubr**, **plotly** and **tidyverse** in RStudio.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n\n## Importing Data\n\nIn this hands-on exercise, the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) of UCI Machine Learning Repository will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\n## Understanding Data\n\nThe data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type.\n\n![](images/螢幕擷取畫面 2025-02-11 155334.png)\n:::\n\n# 3. Building Correlation Matrix: *pairs()* method\n\n## 3.1 Building a basic correlation matrix\n\n`wine[,1:11]`: Select the first 11 column variables of the wine data frame for plotting. \\\n`pairs()`: Draw a scatter matrix, pair each variable in pairs, and generate a corresponding scatter plot.\n\nEach variable is paired with other variables to form a scatterplot, which is used to see the correlation between variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## 3.2 Drawing the lower corner\n\n*pairs* function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\n\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## 3.3 Including with correlation coefficients\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, [*panel.cor*](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function will be used. This will also show higher correlations in a larger font.\n\nThe lower panel shows a scatterplot between variables. The upper panel displays the Pearson correlation coefficient between variables, with numbers indicating the strength of the correlation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n# 4. Visualising Correlation Matrix: ggcormat()\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear **very cluttered when the number of observations is relatively large** (i.e. more than 500 observations). To over come this problem, **Corrgram** data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\n\nThe are at least three R packages provide function to plot corrgram, they are:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\nIn this section, you will learn how to visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package.\n\n## 4.1 The basic plot\n\nOn of the advantage of using *ggcorrmat()* over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\\\n\\\nThe crossed → indicates that the correlation of the variable pair is not significant.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nthings to learn from the code chunk above:\n\n-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.\n\n-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2) function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n\n# **5. Building multiple plots**\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot.**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n-   to build a facet plot, the only argument needed is `grouping.var`.\n\n-   `grouped_ggcorrmat()` can partition the correlation matrix based on a categorical variable (grouping.var).\n\n-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.\n\n-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.\n\n# 6. Corrplot Package\n\n## 6.1 Default Corrplot Package\n\nBefore getting started, you are required to read [An Introduction to corrplot Package](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) in order to gain basic understanding of **corrplot** package.\n\nIn the code chunk below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\n\nNext, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nNotice that the default visual object used to plot the corrgram is circle.\n\n::: callout-note\n## Corrgram default setting\n\n-   Visual elements: Circles are used by default to represent correlation.\n-   Layout: The correlation matrix is ​​a symmetric matrix.\n-   Color scheme: Use a diverging blue-red gradient. blue → positive correlation. red → negative correlation.\n-   Color intensity (saturation) represents the strength of the correlation: The darker the color → the stronger the correlation (stronger linear relationship). Lighter color → weaker correlation (weaker linear relationship).\n:::\n\n## 6.2 Changing Visual elements\n\nIn **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. You can change what you want based on the content.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## 6.3 Changing layout\n\n*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments *`diag`* and *`tl.col`* are used to turn off the diagonal cells and to change **the axis text label colour** to black colour respectively as shown in the code chunk and figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n## 6.4 Changing mixed layout\n\nWith **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nNotice that argument *lower* and *upper* are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument *tl.pos*, on the other, is used to specify the placement of the axis label. Lastly, the *diag* argument is used to specify the glyph on the principal diagonal of the corrgram.\n\n## 6.5 Combining corrgram with the significant test\n\nThe corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\n\nWe can then use the *p.mat* argument of *corrplot* function as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## 6.6 Reorder a corrgram\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the *order* argument of *corrplot()*. Currently, **corrplot** package support four sorting methods, they are: “AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in **seriation** package.\n\n::: callout-note\n## Ordering Type\n\n-   “AOE” is for the angular order of the eigenvectors. (表示特徵向量的角度順序) See Michael Friendly (2002) for details.\n\n-   “FPC” for the first principal component order.\n\n-   “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n-   “alphabet” for alphabetical order.\n:::\n\n::: panel-tabset\n## AOE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## FPC\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"FPC\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## alphabet\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"alphabet\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n:::\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n::: callout-tip\nhclust allows corrplot() to automatically draw correlation group rectangles of variables, making it easier for us to identify which variables are more strongly correlated. This method is particularly suitable for data sets with many variables because it can clearly organize the correlation patterns between variables and avoid too cluttered information. The final effect is to use black rectangles to mark highly correlated groups of variables, improving the visual expression of data analysis!\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](hands-onEx05-2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n# 7. Reference\n\nMichael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.\n\nD.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 178–180.\n\n## 7.1 R packages\n\n-   [`ggcormat()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) package\n\n-   [`ggscatmat`](https://ggobi.github.io/ggally/reference/ggscatmat.html) and [`ggpairs`](https://ggobi.github.io/ggally/reference/ggpairs.html) of [**GGally**](https://ggobi.github.io/ggally/index.html).\n\n-   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/index.html). A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\n\n-   [**corrgram**](https://cran.r-project.org/web/packages/corrgram/index.html) calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.\n",
    "supporting": [
      "hands-onEx05-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}