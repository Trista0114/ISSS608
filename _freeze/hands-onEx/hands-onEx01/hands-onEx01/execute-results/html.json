{
  "hash": "e45a43132c4c174bd96434a78875bd45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 01: A Layered Grammar of Graphics-ggplot2 methods\"\nprev: hands-onEx/hands-onEx00/hands-onEx00.qmd\nauthor: \"Chen.PengWei\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1. Learning outcome\n\nIn this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics.\n\n## 2. Getting started\n\n### 2.1 Installing and loading the required libraries\n\nBefore we get started, it is important for us to ensure that the required R packages have been installed.\n\n::: {.callout-note style=\"color: gray\"}\n## note\n\nThe code chunk on the right assumes that you already have `pacman` package installed. If not, please go ahead install `pacman` first.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n\n### 2.2 Importing data\n\n-   The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package.\n\n-   readr is one of the tidyverse package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"C:/Trista0114/ISSS608/hands-onEx/hands-onEx01/Exam_data.csv\")\n```\n:::\n\n\n\nYear end examination grades of a cohort of primary 3 students from a local school. There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\n-   The categorical attributes are: ID, CLASS, GENDER and RACE.\n-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n![](images/螢幕擷取畫面%202025-01-15%20135148.png)\n\n## 3. Introducing ggplot\n\nggplot is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.It is also part of the tidyverse family specially designed for visual exploration and communication.\n\n### 3.1 R Graphics VS ggplot\n\n::: panel-tabset\n### R Graphics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### ggplots2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: callout-important\n## Important\n\nWhy ggplot is more recommended than R graphics?\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n by [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157)\n:::\n\n## 4. Grammar of Graphics\n\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer.\n\nThere are two principles in Grammar of Graphics, they are:\n\n-   Graphics = distinct layers of grammatical elements\n-   Meaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n![](images/image4.jpg)\n\nReference: Hadley Wickham (2010) [“A layered grammar of graphics.”](https://vita.had.co.nz/papers/layered-grammar.html) *Journal of Computational and Graphical Statistics*, vol. 19, no. 1, pp. 3–28.\n\nA short description of each building block are as follows:\n\n-   **Data**: The dataset being plotted.\n-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\n-   **Geometrics**: The visual elements used for our data, such as point, bar or line.\n-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\n-   **Statistics,** statiscal transformations that summarise data (e.g. mean, confidence intervals).\n-   **Coordinate systems** define the plane on which data are mapped on the graphic.\n-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n## 5. Essential Grammatical Elements in ggplot2: data\n\nLet us call the ggplot() function using the code chunk on the right.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## 6. Essential Grammatical Elements in ggplot2: Aesthetic mappings\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as [position, colour, size, shape, or transparency]{.underline}. Each visual characteristic can thus encode an aspect of the data and be used to convey information. All aesthetics of a plot are specified in the aes() function call.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS))\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n## Note\n\nggplot includes the x-axis and the axis’s label.\n:::\n\n## 7. Essential Grammatical Elements in ggplot2: geom\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\n-   geom_point for drawing individual points (e.g., a scatter plot)\n-   geom_line for drawing lines (e.g., for a line charts) geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\n-   geom_bar for drawing bars (e.g., for bar charts)\n-   geom_histogram for drawing binned values (e.g. a histogram)\n-   geom_polygon for drawing arbitrary shapes\n-   geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n![](images/image6.jpg)\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.\n\n### 7.1 Geom_bar\n\nThe code chunk below plots a bar chart by using geom_bar().\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### 7.2 Geom_dotplot\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-warning\n## Be warned\n\nThe y scale is not very useful, in fact it is very misleading.\n:::\n\nThe code chunk below performs the following two steps:\n\n-   `scale_y_continuous()` is used to turn off the y-axis, and\n-   *binwidth argument* is used to change the binwidth to 2.5.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n-   y-axis disappear and decrease the misunderstanding\n\n### 7.3 Geom_histogram\n\nIn the code chunk below, [*geom_histogram()*](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in *MATHS* field of *exam_data*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()   \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n## Note\n\nThe default bin is **30**.\n:::\n\n### 7.4 Modifying a geometric object by changing `geom()`\n\n-   ***bins*** argument is used to change the number of bins to 20\n-   ***fill*** argument is used to shade the histogram with light blue color\n-   ***color*** argument is used to change the outline colour of the bars in black\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### 7.5 Modifying a geometric object by changing *aes()*\n\n\\\nThe code chunk below changes the interior colour of the histogram (i.e. ***fill***) by using sub-group of *aesthetic()*. This approach can be used to colour, fill and alpha of the geometric.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### 7.6 Geom-density()\n\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk below plots two kernel density lines by using *colour* or *fill* arguments of *aes()*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### 7.7 Geom_boxplot\n\n[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n**Notches** are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### 7.8 Geom_violin\n\n[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### 7.9 Geom_point()\n\n[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### 7.10 Geom objects can be combined\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## 8. Essential Grammatical Elements in ggplot2: stat\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n    -   a mean\n    -   a confidence limit\n-   There are two ways to use these functions:\n    -   add a `stat_()` function and override the default geom, or\n\n    -   add a `geom_()` function and override the default stat.\n\n### 8.1 Working with `stat()`\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n### 8.2 Working with stat - the *stat_summary()* method\n\nThe code chunk below adds mean values by using [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n### 8.3 Working with stat - the `geom()` method\n\nThe code chunk below adding mean values by using `geom_()` function and overriding the default stat.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n### 8.4 Adding a best fit curve on a scatterplot?\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve. Below are the graph with and without the curve.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n## Note\n\n-   The default method used is *loess*.\n\n    **LOESS** (Locally Estimated Scatterplot Smoothing) is a non-parametric regression method used to smooth scatterplot data points, particularly when exploring non-linear relationship. It is suitable for samll to medium sized datasets.\n:::\n\nThe default smoothing method can be overridden. The `lm` value represents a **linear model**. When `method=\"lm\"`, `geom_smooth()` uses linear regression to fit a straight line that shows the linear trend in the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n**Other Options for `method`**\n\n-   **`method = \"loess\"`**: This is the default value, suitable for small and medium-sized datasets and is used for fitting non-linear trends.\n-   **`method = \"glm\"`**: Uses a **Generalized Linear Model** for fitting.\n-   **`method = \"gam\"`**: Uses a **Generalized Additive Model** for fitting, which requires the `mgcv` package.\n\n## 9. Essential Grammatical Elements in ggplot2: Facets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html)`.`\n\n### 9.1 Working with `facet_wrap()`\n\n[`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n### 9.2 `facet_grid()` function\n\n[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n## 10. Essential Grammatical Elements in ggplot2: Coordinates\n\nThe *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n-   [\\[\\`coord_cartesian()\\`\\]](https://ggplot2.tidyverse.org/reference/coord_cartesian.html){target=\"_blank\"}: the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).\n-   [\\[\\`coord_flip()\\`\\]](https://ggplot2.tidyverse.org/reference/coord_flip.html){target=\"_blank\"}: a cartesian system with the x and y flipped.\n-   [\\[\\`coord_fixed()\\`\\]](https://ggplot2.tidyverse.org/reference/coord_fixed.html){target=\"_blank\"}: a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n-   [\\[\\`coord_quickmap()\\`\\]](https://ggplot2.tidyverse.org/reference/coord_map.html){target=\"_blank\"}: a coordinate system that approximates a good aspect ratio for maps.\n\n### 10.1 Working with Coordinate\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n### 10.2 Changing the y- and x-axis range- `coord_cartesian()`\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n## 11. Essential Grammatical Elements in ggplot2: themes\n\nThemes control elements of the graph not related to the data. For example:\n\n-   background colour\n-   size of fonts\n-   gridlines\n-   colour of labels\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n### 11.1 Working with theme\n\nUsing `theme_gray()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\nA horizontal bar chart plotted using `theme_classic()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\nA horizontal bar chart plotted using `theme_minimal()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](hands-onEx01_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n## 12. Reference\n\n-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.\n\n-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.\n\n-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version\n\n-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n\n-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n\n-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n",
    "supporting": [
      "hands-onEx01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}