---
title: "Hands-on Exercise 04-4: Funnel Plots for Fair Comparisons"
author: "Chen.PengWei"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1. Overview

------------------------------------------------------------------------

Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:

-   plotting funnel plots by using **funnelPlotR** package,
-   plotting static funnel plot by using ggplot2 package, and
-   plotting interactive funnel plot by using both **plotly R** and **ggplot2** packages.

# 2. Getting Started

::: panel-tabset
## Installing Libraries

In this exercise, four R packages will be used. They are:

-   **readr** for importing csv into R.

-   **FunnelPlotR** for creating funnel plot.

-   **ggplot2** for creating funnel plot manually.

-   **knitr** for building static html table.

-   **plotly** for creating interactive funnel plot.

    ```{r}
    pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
    ```

## Importing Data

In this section, COVID-19_DKI_Jakarta will be used. The data was downloaded from [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/). For this hands-on exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.

The code chunk below imports the data into R and save it into a tibble data frame object called *covid19*.

```{r}
covid19 <- read_csv("C:/Trista0114/ISSS608/hands-onEx/hands-onEx04-4/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)
```

```{r}
covid19 
```
:::

# 3. FunnelPlotR methods

------------------------------------------------------------------------

[**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot to generate funnel plots. It requires a `numerator` (events of interest), `denominator` (population to be considered) and `group`. The key arguments selected for customisation are:

-   `limit`: plot limits (95 or 99).
-   `label_outliers`: to label outliers (true or false).
-   `Poisson_limits`: to add Poisson limits to the plot.
-   `OD_adjust`: to add overdispersed limits to the plot.
-   `xrange` and `yrange`: to specify the range to display for axes, acts like a zoom function.
-   Other aesthetic components such as graph title, axis labels etc.

## 3.1 FunnelPlotR methods: The basic plot

```{r}
funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```

```         
A funnel plot object with 267 points of which 0 are outliers.  Plot is adjusted for overdispersion. 
```

X-axis **(Expected)**: represents the expected value (number of samples, expected number of events), such as the expected number of deaths in each region.

Y-axis **(Standardised Ratio)**: Standardized ratio, possibly the Standardized Mortality Ratio (SMR), which represents the ratio of the actual diagnosis/death ratio relative to the expected value.

**Data Points**: Each point represents a sub-district, with the X-coordinate representing the expected number of deaths in the region and the Y-coordinate representing the normalized rate for the region.

::: callout-tip
## Things to learn from the code

-   `group` in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.
-   By default, `data_type`argument is “SR”.
-   `limit`: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.
:::

## 3.2 FunnelPlotR methods: Makeover 1

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #Death rate
  xrange = c(0, 6500),  
  yrange = c(0, 0.05)   
)
```

::: callout-note
## Control Limits

Purple dashed line (95% upper/lower bounds): Indicates that 95% of the data points should fall within this range. Data points beyond this line may have abnormal variation, but it is not necessarily severe.

Green solid line (99.8% upper/lower limit): Stricter control limit. If the data point falls outside this line, it means that the mortality rate in the area is significantly abnormal, and there may be medical quality issues, reporting bias or data errors.
:::

::: callout-tip
## Things to learn from code

-   \+ `data_type` argument is used to change from default “SR” to “PR” (i.e. proportions).
-   \+ `xrange` and `yrange` are used to set the range of x-axis and y-axis
:::

## 3.3 FunnelPlotR methods: Makeover 2

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases",          
  x_label = "Cumulative COVID-19 Positive Cases", 
  y_label = "Cumulative Fatality Rate"  
) 

```

::: callout-tip
## Things to learn from code

-   `label = NA` argument is to removed the default label outliers feature.
-   `title` argument is used to add plot title.
-   `x_label` and `y_label` arguments are used to add/edit x-axis and y-axis titles.
:::

# 4. Funnel Plot for Fair Visual Comparison: ggplot2 methods

In this section, you will gain hands-on experience on building funnel plots step-by-step by using ggplot2. It aims to enhance you working experience of ggplot2 to customise speciallised data visualisation like funnel plot.

## 4.1 Computing the basic derived fields

To plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>% #death rate
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>% # Standard Error of death rate
  filter(rate > 0) #only for death rate>0
```

Next, the *fit.mean* is computed by using the code chunk below.

This is Inverse Variance Weighting (IVW), which gives higher weight to data with small standard errors (small SE) because these data are more accurate. This can make the weighted average more robust and reduce the impact of high-variance data.

![](images/螢幕擷取畫面%202025-02-06%20151349.png){width="297"}

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

## 4.2 Calculate lower and upper limits for 95% and 99.9% CI

The code chunk below is used to compute the lower and upper limits for 95% confidence interval.

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

| code           | Description                      |
|----------------|----------------------------------|
| `number.ll95`  | Lower bound of the **95% CI**    |
| `number.ul95`  | Upper bound of the **95% CI**    |
| `number.ll999` | Lower bound of the **99.9% CI**  |
| `number.ul999` | Upper bound of the **99.9% CI**  |
| `number.seq`   | Sequence of positive case counts |

## 4.3 Plotting a static funnel plot

```{r}
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "purple", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "purple", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "green") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "green") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "black") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "black") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

## 4.4 Interactive Funnel Plot: plotly + ggplot2

The funnel plot created using ggplot2 functions can be made interactive with `ggplotly()` of **plotly** r package.

```{r}
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```

# 5. References

-   [funnelPlotR](https://nhs-r-community.github.io/FunnelPlotR/index.html) package.

-   [Funnel Plots for Indirectly-standardised ratios](https://nhs-r-community.github.io/FunnelPlotR/articles/funnel_plots.html).

-   [Changing funnel plot options](https://nhs-r-community.github.io/FunnelPlotR/articles/changing_funnel_plot_options.html)

-   [ggplot2](https://ggplot2.tidyverse.org/) package.
