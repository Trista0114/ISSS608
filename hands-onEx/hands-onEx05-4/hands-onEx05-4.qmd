---
title: "Hands on Exercise 05-4: Visual Multivariate Analysis with Parallel Coordinates Plot"
author: "Chen.PengWei"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1. Overview

------------------------------------------------------------------------

Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. 

It is more common in academic research and scientific analysis, and less commonly used in commercial or public data visualization. For example, it can be used to describe the characteristics of different clusters in Customer Segmentation,. Expert opinion: Stephen Few (2006) pointed out that parallel coordinate plots are mainly used for data analysis rather than conveying information to the public. It is suitable for interactive exploration of data rather than static display.

::: callout-note
## Things you will learn

-   3.1 parallel coordinates : `ggparcoord()`

    -   3.2 combine with boxplot

    -   3.3 use with facet: `facet_wrap()`

-   4 Interactive Parallel Coordinates :`parallelPlot()`

    -   4.1-4.4 Changing the default and combine with histogram
:::

# 2. Getting Started

::: panel-tabset
## Installing Libraries

For this exercise, the **GGally**, **parcoords**, **parallelPlot** and **tidyverse** packages will be used.

```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

## Importing Data

n this hands-on exercise, the World Happinees 2018 (http://worldhappiness.report/ed/2018/) data will be used. The data set is download at https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls. The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called **WHData-2018.csv**.

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

## Understanding Data

The data set consists of 12 variables, with 2 catogory variable (Counrty and Regoin) and others 10 numeric variables.

```{r}
head(wh,10)
```
:::

# 3. Plotting Static Parallel Coordinates Plot

In this section, you will learn how to plot static parallel coordinates plot by using [`ggparcoord()`](https://ggobi.github.io/ggally/reference/ggparcoord.html) of **GGally** package. Before getting started, it is a good practice to read the function description in detail.

## 3.1 Plotting a simple parallel coordinates

```{r}
ggparcoord(data = wh, 
           columns = c(7:12))
```

Notice that only two argument namely `data` and `columns` is used. `Data` argument is used to map the data object (i.e. *wh*) and `columns` is used to select the columns for preparing the parallel coordinates plot.

## 3.2 Plotting a parallel coordinates with boxplot

The basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by `ggparcoord()`.

✅ ggparcoord() is suitable for multidimensional data visualization and can quickly compare patterns between different variables. \
✅ Use uniminmax standardization to make data more comparable and not affected by different scales.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Parallel Coordinates Plot of World Happines Variables")

```

::: callout-tip
## Things to learn form code

-   groupColumn = 2:

    -   Specify a grouping variable (column 2: Region), to color different categories, also colour the parallel coordinates lines by region name.

-   scale = "uniminmax"

    -   Standardization method: scale the data to the \[0,1\] interval to make variables of different scales more comparable

-   alphaLines = 0.2

    -   Set line transparency (0.2) to reduce the impact of overlapping lines and make trends clearer.

-   boxplot = TRUE

    -   Add a boxplot at the bottom of the graph to show the distribution of each variable and help identify outliers and data ranges.
:::

## 3.3 Parallel coordinates with facet

In the code chunk below, `facet_wrap()` of **ggplot2** is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region)
```

One of the aesthetic defect of the current design is that some of the variable names overlap on x-axis.

## 3.4 Adjusting x-axis text label : `theme()`

To make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using `theme()` function. Additionally, in order to avoid the labels overlap the plot, you can use `hjust` to adjust the label location.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30,hjust=1))
```

-   To rotate x-axis text labels, we use `axis.text.x` as argument to `theme()` function. And we specify `element_text(angle = 30)` to rotate the x-axis text by an angle 30 degree.

# 4. Plotting Interactive Parallel Coordinates Plot: parallelPlot methods

[**parallelPlot**](https://cran.r-project.org/web/packages/parallelPlot/) is an R package specially designed to plot a parallel coordinates plot by using ‘htmlwidgets’ package and [d3.js](https://d3js.org/). In this section, you will learn how to use functions provided in parallelPlot package to build interactive parallel coordinates plot.

## 4.1 The basic plot :`parallelPlot()`

```{r}
wh <- wh %>%
  select("Happiness score", c(7:12))
parallelPlot(wh,
             width = 320,
             height = 250)
```

You can try to hover on each line. However, notice that some of the axis label are too long. You will learn how to adjust it in the further step.

## 4.2 Rotate axis label

In the code chunk below, `rotateTitle` argument is used to avoid overlapping axis labels.

```{r}
parallelPlot(wh,
             rotateTitle = TRUE)
```

We can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used. Additionally, you also can change the order of the variables by moving them!

##  4.3 Changing the colour scheme: `continousCS`

We can change the default blue colour scheme by using `continousCS` argument as shown in the code chunl below. "YlOrRd" is the Color Mapping of Yellow → Orange → Red. This makes the color more red for higher values ​​and more yellow for lower values.

```{r}
parallelPlot(wh,
             continuousCS = "YlOrRd",
             rotateTitle = TRUE)
```

## 4.4 Parallel coordinates plot with histogram: `histoVisibility`

`histoVisibility` argument is used to plot histogram along the axis of each variables.

`rep(TRUE, ncol(wh))`: Produces a TRUE vector with length equal to ncol(wh), indicating that all variables display histograms. Histograms provide additional information, allowing us to simultaneously observe the data distribution of variables and the relationships between variables.

```{r}
histoVisibility <- rep(TRUE, ncol(wh))
parallelPlot(wh,
             rotateTitle = TRUE,
             histoVisibility = histoVisibility)
```

# 5. References

-   [Kam, T.S. (2025). Visual Statistical Analysis.](https://r4va.netlify.app/chap15)

-   [*ggparcoord()*](http://ggobi.github.io/ggally/reference/ggparcoord.html) of [**GGally**](http://ggobi.github.io/ggally/index.html) package

-   [**parcoords** user guide](https://cran.r-project.org/web/packages/parcoords/parcoords.pdf)

-   [**parallelPlot**](https://cran.r-project.org/web/packages/parallelPlot/parallelPlot.pdf)
